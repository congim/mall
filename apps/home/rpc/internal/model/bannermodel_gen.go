// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bannerFieldNames          = builder.RawFieldNames(&Banner{})
	bannerRows                = strings.Join(bannerFieldNames, ",")
	bannerRowsExpectAutoSet   = strings.Join(stringx.Remove(bannerFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	bannerRowsWithPlaceHolder = strings.Join(stringx.Remove(bannerFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBannerIdPrefix = "cache:banner:id:"
)

type (
	bannerModel interface {
		Insert(ctx context.Context, data *Banner) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Banner, error)
		Update(ctx context.Context, data *Banner) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBannerModel struct {
		sqlc.CachedConn
		table string
	}

	Banner struct {
		Id    int64  `db:"id"`    // 活动id
		Name  string `db:"name"`  // 活动名
		Image string `db:"image"` // 活动图片
		Url   string `db:"url"`   // 活动url
		State string `db:"state"` // 活动状态: 1 使用中， 2 未使用
	}
)

func newBannerModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBannerModel {
	return &defaultBannerModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`banner`",
	}
}

func (m *defaultBannerModel) Insert(ctx context.Context, data *Banner) (sql.Result, error) {
	bannerIdKey := fmt.Sprintf("%s%v", cacheBannerIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, bannerRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Image, data.Url, data.State)
	}, bannerIdKey)
	return ret, err
}

func (m *defaultBannerModel) FindOne(ctx context.Context, id int64) (*Banner, error) {
	bannerIdKey := fmt.Sprintf("%s%v", cacheBannerIdPrefix, id)
	var resp Banner
	err := m.QueryRowCtx(ctx, &resp, bannerIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bannerRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBannerModel) Update(ctx context.Context, data *Banner) error {
	bannerIdKey := fmt.Sprintf("%s%v", cacheBannerIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bannerRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Image, data.Url, data.State, data.Id)
	}, bannerIdKey)
	return err
}

func (m *defaultBannerModel) Delete(ctx context.Context, id int64) error {
	bannerIdKey := fmt.Sprintf("%s%v", cacheBannerIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bannerIdKey)
	return err
}

func (m *defaultBannerModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBannerIdPrefix, primary)
}

func (m *defaultBannerModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bannerRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBannerModel) tableName() string {
	return m.table
}
